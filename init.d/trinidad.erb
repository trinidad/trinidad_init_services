#!/usr/bin/env bash
# Trinidad init.d script using `jsvc` customized from the jsvc-wrapper.sh
# http://github.com/nicobrevin/jruby-jsvc/blob/master/bin/jsvc-wrapper.sh
#
# set on a per script/daemon basis (optional) :
# APP_NAME - name of your application (defaults to "trinidad")

# https://github.com/trinidad/trinidad_init_services/wiki/Installing-JSVC
JSVC=<%= @jsvc %>
JAVA_HOME=<%= @java_home %>
JRUBY_HOME=<%= @jruby_home %>
APP_PATH=<%= @app_path %>
RUBY_SCRIPT=<%= @trinidad_daemon_path %>
# The user rights for the running daemon, if you don't bind directly to 80 than
# it's always a good idea to run trinidad with non-root user rights.
# Make sure this user has rights on PIDFILE and LOG_FILE paths.
# Leaving this empty will cause the daemon to always run as whichever user calls
# the script (which during init is equivalent to running it as root).
RUN_USER="<%= @run_user %>"
# Set this to "1" to echo commands before running them (for troubleshooting) :
ECHO_COMMAND=""

# Add here the options that Trinidad needs to run your application,
# but DO NOT delete the -d option, i.e -e production
TRINIDAD_OPTS="<%= @trinidad_options.join(" ") %>"

PIDFILE=<%= @pid_file %>
LOG_FILE=<%= @log_file %>

# Create pidfile directory if missing
# Todo: Remove PIDFILE_DIR creation once jsvc can be started
# as root using the -user option without any issues.
PIDFILE_DIR=$(dirname $PIDFILE)
if [ ! -d "$PIDFILE_DIR" ] ; then
  mkdir -p $PIDFILE_DIR
  if [ ! -z "$RUN_USER" ] ; then
    chown -R $RUN_USER $PIDFILE_DIR
  fi
fi

# Implements the jsvc Daemon interface.
MAIN_CLASS=com.msp.jsvc.JRubyDaemon

CLASSPATH=<%= @classpath.join(":") %>

JRUBY_SHELL=/bin/sh

JRUBY_NATIVE_PATH=""
if [ -d "$JRUBY_HOME/lib/native/" ]; then
  for d in $JRUBY_HOME/lib/native/*`uname -s`; do
    if [ -z "$JRUBY_NATIVE_PATH" ]; then
      JRUBY_NATIVE_PATH="$d"
    else
      JRUBY_NATIVE_PATH="$JRUBY_NATIVE_PATH:$d"
    fi
  done
fi

# JAVA_MEM, JAVA_MEM_MIN & JAVA_STACK are compatible with jruby's binary

if [ -z "$JAVA_MEM" ] ; then
  JAVA_MEM=-Xmx500m
fi
# backwards compatibility we accept the non-full option (e.g. JAVA_MEM=500m)
if [[ "$JAVA_MEM" != "-Xmx"* ]] ; then
  JAVA_MEM="-Xmx$JAVA_MEM"
fi

# we accept the non-full option (e.g. JAVA_MEM_MIN=500m)
if [[ -n "$JAVA_MEM_MIN" && "$JAVA_MEM_MIN" != "-Xms"* ]] ; then
  JAVA_MEM_MIN="-Xms$JAVA_MEM_MIN"
fi
if [ -z "$JAVA_MEM_MIN" ] ; then
  JAVA_MEM_MIN=""
fi

if [ -z "$JAVA_STACK" ] ; then
  JAVA_STACK=-Xss2048k
fi
# backwards compatibility we accept the non-full option (e.g. JAVA_STACK=2048k)
if [[ "$JAVA_STACK" != "-Xss"* ]] ; then
  JAVA_STACK="-Xss$JAVA_STACK"
fi

# A custom (daemon) script will be started (not jruby -S) thus JRUBY_OPTS
# won't be used here, feel free to hand tune JAVA_OPTS here instead ...

JAVA_OPTS="$JAVA_MEM $JAVA_MEM_MIN $JAVA_STACK -Xbootclasspath/a:$JRUBY_HOME/lib/jruby.jar"

# force file.encoding to UTF-8 :
if [[ -z "$JAVA_ENCODING" ]]; then
  JAVA_OPTS="$JAVA_OPTS -Dfile.encoding=UTF-8"
fi

JAVA_PROPS="$JAVA_PROPS \
  -Djruby.shell=$JRUBY_SHELL \
  -Djffi.boot.library.path=$JRUBY_NATIVE_PATH \
  <%= @jruby_opts.join(' ') %> "
  
PROC_NAME=${SCRIPT_NAME:-${APP_NAME:-"trinidad"}}

JSVC_ARGS="-home $JAVA_HOME \
  $JSVC_ARGS_EXTRA \
  -wait 20 \
  -pidfile $PIDFILE \
  -procname jsvc-$PROC_NAME \
  -jvm server
  -outfile $LOG_FILE \
  -errfile &1"
  
#
# Stop/Start
#

if [[ -n "$RUN_USER" && $EUID -eq 0 ]]; then
  JSVC="sudo -u $RUN_USER $JSVC"
fi

STOP_COMMAND="$JSVC $JSVC_ARGS -stop $MAIN_CLASS"
START_COMMAND="$JSVC $JSVC_ARGS -cp $CLASSPATH $JAVA_PROPS $JAVA_OPTS $MAIN_CLASS $RUBY_SCRIPT $TRINIDAD_OPTS"

cd $APP_PATH || exit 1

case "$1" in
    start)
      if [ -e "$PIDFILE" ]; then
          echo "Pidfile already exists, not starting."
          exit 1
      else
          echo "Starting $PROC_NAME daemon..."
          if [ -n "$ECHO_COMMAND" ]; then echo $START_COMMAND; fi
          $START_COMMAND
          EXIT_CODE=$?
          if [ "$EXIT_CODE" != 0 ]; then
              echo "Daemon exited with status: $EXIT_CODE. Check pidfile and log"
          fi
      fi
      ;;
    stop)
      if [ -e "$PIDFILE" ]; then
          echo "Stopping $PROC_NAME daemon..."
          if [ -n "$ECHO_COMMAND" ]; then echo $STOP_COMMAND; fi
          $STOP_COMMAND
      else
          echo "No pid file, not stopping."
          exit 1
      fi
      ;;
    restart)
      if [ -e "$PIDFILE" ]; then
          echo "Stopping $PROC_NAME daemon..."
          if [ -n "$ECHO_COMMAND" ]; then echo $STOP_COMMAND; fi
          $STOP_COMMAND
      fi
      if [ -e "$PIDFILE" ]; then
          echo "Pidfile still present, $PROC_NAME hasn't stopped"
          exit 1
      else
          if [ -n "$ECHO_COMMAND" ]; then echo $START_COMMAND; fi
          $START_COMMAND
          EXIT_CODE=$?
          if [ "$EXIT_CODE" != 0 ]; then
              echo "Daemon exited with status: $EXIT_CODE. Check pidfile and log"
          fi
      fi
      ;;
    status)
      if [ "$PIDFILE" ]; then
          PID=`cat $PIDFILE`
          OUTPUT=`ps -p $PID`
          if [ ${#OUTPUT} -gt 0 ]; then
              echo "Service running with pid: $PID"
          else
              echo "Pidfile present, but process not running"
          fi
      else
          echo "No pidfile present"
      fi
      ;;
    *)
      echo "Unrecognised command. Usage trinidad [ start | stop | restart ]"
      ;;
esac
